// <auto-generated />

using System;
using Clarity.Api;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Clarity.Api.Migrations
{
    [DbContext(typeof(ApiDbContext))]
    [Migration("20190218002018_ProductCartOrderPayment")]
    partial class ProductCartOrderPayment
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Clarity.Api.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("Clarity.Api.CartProduct", b =>
                {
                    b.Property<Guid>("CartId");

                    b.Property<Guid>("ProductId");

                    b.Property<DateTime>("Created");

                    b.Property<bool>("IsDownload");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductName");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("Updated");

                    b.HasKey("CartId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartProducts");
                });

            modelBuilder.Entity("Clarity.Api.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<DateTime?>("Updated");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Clarity.Api.File", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ContentType");

                    b.Property<DateTime>("Created");

                    b.Property<string>("FileName")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("Uri")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("Clarity.Api.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<int>("Number")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Clarity.Api.OrderProduct", b =>
                {
                    b.Property<Guid>("OrderId");

                    b.Property<Guid>("ProductId");

                    b.Property<DateTime>("Created");

                    b.Property<bool>("IsDownload");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductName")
                        .IsRequired();

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("Updated");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderProducts");
                });

            modelBuilder.Entity("Clarity.Api.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ChargeId");

                    b.Property<DateTime>("Created");

                    b.Property<string>("Currency")
                        .IsRequired();

                    b.Property<string>("CustomerCode")
                        .IsRequired();

                    b.Property<string>("Description");

                    b.Property<Guid>("OrderId");

                    b.Property<string>("TokenId")
                        .IsRequired();

                    b.Property<DateTime?>("Updated");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Clarity.Api.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<DateTime>("Created");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDownload");

                    b.Property<string>("Name");

                    b.Property<string>("QuantityPerUnit")
                        .IsRequired();

                    b.Property<int>("ReorderLevel");

                    b.Property<string>("Sku");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UnitsInStock");

                    b.Property<int>("UnitsOnOrder");

                    b.Property<DateTime?>("Updated");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.HasIndex("Sku")
                        .IsUnique()
                        .HasFilter("[Sku] IS NOT NULL");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Clarity.Api.ProductCategory", b =>
                {
                    b.Property<Guid>("ProductId");

                    b.Property<Guid>("CategoryId");

                    b.Property<string>("CategoryName")
                        .IsRequired();

                    b.Property<DateTime>("Created");

                    b.Property<string>("ProductName")
                        .IsRequired();

                    b.Property<DateTime?>("Updated");

                    b.HasKey("ProductId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("Clarity.Api.ProductFile", b =>
                {
                    b.Property<Guid>("ProductId");

                    b.Property<Guid>("FileId");

                    b.Property<string>("ContentType");

                    b.Property<DateTime>("Created");

                    b.Property<string>("FileName")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<bool>("Primary");

                    b.Property<string>("ProductName")
                        .IsRequired();

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("Uri")
                        .IsRequired();

                    b.HasKey("ProductId", "FileId");

                    b.HasIndex("FileId");

                    b.ToTable("ProductFiles");
                });

            modelBuilder.Entity("Clarity.Api.CartProduct", b =>
                {
                    b.HasOne("Clarity.Api.Cart", "Cart")
                        .WithMany("CartProducts")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Clarity.Api.Product", "Product")
                        .WithMany("CartProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Clarity.Api.Order", b =>
                {
                    b.OwnsOne("Clarity.Core.Address", "ShippingAddress", b1 =>
                        {
                            b1.Property<Guid>("OrderId");

                            b1.Property<string>("Country")
                                .HasColumnName("ShippingCountry");

                            b1.Property<string>("Locality")
                                .HasColumnName("ShippingCity");

                            b1.Property<string>("PostalCode")
                                .HasColumnName("ShippingZipCode");

                            b1.Property<string>("Region")
                                .HasColumnName("ShippingState");

                            b1.Property<string>("StreetAddress")
                                .HasColumnName("ShippingStreet");

                            b1.HasKey("OrderId");

                            b1.ToTable("Orders");

                            b1.HasOne("Clarity.Api.Order")
                                .WithOne("ShippingAddress")
                                .HasForeignKey("Clarity.Core.Address", "OrderId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Clarity.Api.OrderProduct", b =>
                {
                    b.HasOne("Clarity.Api.Order", "Order")
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Clarity.Api.Product", "Product")
                        .WithMany("OrderProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Clarity.Api.Payment", b =>
                {
                    b.HasOne("Clarity.Api.Order", "Order")
                        .WithMany("Payments")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Clarity.Api.ProductCategory", b =>
                {
                    b.HasOne("Clarity.Api.Category", "Category")
                        .WithMany("ProductCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Clarity.Api.Product", "Product")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Clarity.Api.ProductFile", b =>
                {
                    b.HasOne("Clarity.Api.File", "File")
                        .WithMany("ProductFiles")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Clarity.Api.Product", "Product")
                        .WithMany("ProductFiles")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
